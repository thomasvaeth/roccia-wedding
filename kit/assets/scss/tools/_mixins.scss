//---------------------------------------------- 
//  Flex Grid - flex-grid()
//  @description: Creates a flexbox grid
//  @param:       $sm, $md, $lg, $xl: [null] - Media sizes
//  @param:       $pad: [0] - Padding of child elements and negative margin of parent
//----------------------------------------------
@mixin flex-grid($xs, $sm, $md, $lg: null, $xl: null, $pad: 0) {
  display: flex;
  flex-direction: row;
  flex-flow: wrap;
  margin-left: -$pad;
  margin-right: -$pad;

  & > * {
    padding: $pad;
    flex-basis: 100% / $xs;
    max-width: 100% / $xs;
    
    @media (min-width: $mq-small) {
      flex-basis: 100% / $sm;
      max-width: 100% / $sm;
    }

    @media (min-width: $mq-med) {
      flex-basis: 100% / $md;
      max-width: 100% / $md;
    }

    @if $lg {
      @media (min-width: $mq-large) {
        flex-basis: 100% / $lg;
        max-width: 100% / $lg;
      }
    }

    @if $xl {
      @media (min-width: $mq-xlarge) {
        flex-basis: 100% / $xl;
        max-width: 100% / $xl;
      }
    }
  }
}

//---------------------------------------------- 
//  Flex Grid Animation - flex-grid-animation()
//  @description: Animation delay for flex grid
//  @param:       $xs, $sm, $md, $lg, $xl: [null] - Media sizes
//  @param:       $delay: [0.1s] - Animation delay of child elements
//----------------------------------------------
@mixin flex-grid-animation($xs, $sm, $md, $lg: null, $xl: null, $delay: 0.1s) {
  
  & > * {
    $count: 1;
    @while $count <= $xs {
      &:nth-child(#{$xs}n + #{$count}) {
        animation-delay: $delay * $count;
      }
      $count: $count + 1;
    }
      
    @media (min-width: $mq-small) {
      $count: 1;
      @while $count <= $sm {
        &:nth-child(#{$sm}n + #{$count}) {
          animation-delay: $delay * $count;  
        }
        $count: $count + 1;
      }
    }

    @media (min-width: $mq-med) {
      $count: 1;
      @while $count <= $md {
        &:nth-child(#{$md}n + #{$count}) {
          animation-delay: $delay * $count;  
        }
        $count: $count + 1;
      }
    }

    @if $lg {
      @media (min-width: $mq-large) {
        $count: 1;
        @while $count <= $lg {
          &:nth-child(#{$lg}n + #{$count}) {
            animation-delay: $delay * $count;  
          }
          $count: $count + 1;
        }
      }
    }

    @if $xl {
      @media (min-width: $mq-xlarge) {
        $count: 1;
        @while $count <= $xl {
          &:nth-child(#{$xl}n + #{$count}) {
            animation-delay: $delay * $count;  
          }
          $count: $count + 1;
        }
      }
    }
  }
}

//---------------------------------------------- 
//  Link Underline - link-underline();
//  @description: Draw link underline from center on hover using pseudo element
//  @param:       $mainColor:  [$color-alpha] - Text color
//  @param:       $underColor: [$color-alpha] - Underline color
//----------------------------------------------
@mixin link-underline($mainColor: $color-alpha, $underColor: $color-alpha) {
  position: relative;

  font-style: italic;
  color: $mainColor;
  text-decoration: none;

  &:hover,
  &:active {
    color: $mainColor;

    &:before {
      visibility: visible;
      transform: scaleX(1);
    }
  }

  &:focus {
    color: $mainColor;

    &:before {
      background-color: darken($underColor, 10);
    }
  }

  &:before {
    content: "";
    position: absolute;
    bottom: -0.125em;
    left: 0;

    height: 1px;
    width: 100%;
    
    background-color: $underColor;
    visibility: hidden;
    transform: scaleX(0);
    transition: all 0.3s ease-in-out;
  }
}

//---------------------------------------------- 
//  Animation Delay - nth-animation-delay();
//  @description: Adds animation delay for each child element
//  @param:       $items: [12]
//  @param:       $time:  [0.1s]
//----------------------------------------------
@mixin nth-animation-delay($items: 20, $time: 0.05s) {
  @for $i from 1 through $items {
    
    &:nth-child(#{$i}) {   
      animation-delay: $time * $i; 
    }
  }
}
